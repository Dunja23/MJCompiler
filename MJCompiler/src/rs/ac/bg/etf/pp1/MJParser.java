
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 10 00:42:53 CEST 2024
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Wed Jul 10 00:42:53 CEST 2024
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\067\011\000\002\002\004\000\002\066" +
    "\003\000\002\011\004\000\002\011\002\000\002\061\012" +
    "\000\002\077\003\000\002\010\004\000\002\010\002\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\003\005\000\002\013\006\000\002\013\004\000\002\013" +
    "\003\000\002\064\003\000\002\012\004\000\002\012\002" +
    "\000\002\014\011\000\002\016\007\000\002\016\002\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\065\003\000\002\015\011\000\002\015\014\000\002\015" +
    "\013\000\002\015\015\000\002\023\005\000\002\023\002" +
    "\000\002\024\004\000\002\024\002\000\002\026\004\000" +
    "\002\026\002\000\002\027\006\000\002\007\004\000\002" +
    "\007\002\000\002\070\013\000\002\025\003\000\002\025" +
    "\003\000\002\071\003\000\002\017\003\000\002\017\002" +
    "\000\002\020\004\000\002\020\002\000\002\022\004\000" +
    "\002\022\002\000\002\006\003\000\002\004\003\000\002" +
    "\004\005\000\002\005\005\000\002\005\003\000\002\021" +
    "\004\000\002\021\002\000\002\073\004\000\002\063\005" +
    "\000\002\063\002\000\002\041\003\000\002\041\003\000" +
    "\002\041\013\000\002\041\005\000\002\035\007\000\002" +
    "\035\011\000\002\040\004\000\002\040\011\000\002\040" +
    "\004\000\002\040\004\000\002\040\005\000\002\040\007" +
    "\000\002\040\010\000\002\030\003\000\002\030\002\000" +
    "\002\034\003\000\002\034\002\000\002\033\004\000\002" +
    "\033\002\000\002\032\004\000\002\032\002\000\002\031" +
    "\005\000\002\031\002\000\002\053\004\000\002\052\005" +
    "\000\002\052\002\000\002\051\004\000\002\050\005\000" +
    "\002\050\002\000\002\047\004\000\002\046\005\000\002" +
    "\046\002\000\002\045\003\000\002\045\005\000\002\075" +
    "\005\000\002\075\004\000\002\101\005\000\002\101\002" +
    "\000\002\074\004\000\002\100\005\000\002\100\002\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\007\000\002\103\006\000\002\103" +
    "\005\000\002\103\006\000\002\103\006\000\002\103\003" +
    "\000\002\037\003\000\002\037\002\000\002\072\006\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\057\003\000\002\102\005\000\002\102\006\000\002\036" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\043\003\000\002\043\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\054\005\000\002\054" +
    "\006\000\002\054\004\000\002\054\004\000\002\054\011" +
    "\000\002\054\003\000\002\055\003\000\002\055\002\000" +
    "\002\056\005\000\002\056\002\000\002\062\003\000\002" +
    "\062\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\004\005\001\002\000\004\002\u0108\001" +
    "\002\000\004\061\006\001\002\000\014\005\uffff\022\uffff" +
    "\023\uffff\032\uffff\061\uffff\001\002\000\014\005\ufffd\022" +
    "\ufffd\023\ufffd\032\ufffd\061\ufffd\001\002\000\014\005\ufff9" +
    "\022\ufff9\023\ufff9\032\012\061\ufff9\001\002\000\012\005" +
    "\u0105\022\027\023\030\061\023\001\002\000\004\061\014" +
    "\001\002\000\014\005\ufffe\022\ufffe\023\ufffe\032\ufffe\061" +
    "\ufffe\001\002\000\004\005\ufffb\001\002\000\004\005\016" +
    "\001\002\000\012\005\ufff9\022\ufff9\023\ufff9\061\ufff9\001" +
    "\002\000\012\005\022\022\027\023\030\061\023\001\002" +
    "\000\006\003\372\061\374\001\002\000\012\005\ufffa\022" +
    "\ufffa\023\ufffa\061\ufffa\001\002\000\010\006\uffd1\017\uffd1" +
    "\061\uffd1\001\002\000\014\003\uffc7\005\uffc7\051\363\054" +
    "\uffc7\061\uffc7\001\002\000\012\005\ufff7\022\ufff7\023\ufff7" +
    "\061\ufff7\001\002\000\012\005\ufff6\022\ufff6\023\ufff6\061" +
    "\ufff6\001\002\000\012\005\ufff8\022\ufff8\023\ufff8\061\ufff8" +
    "\001\002\000\004\061\050\001\002\000\004\061\023\001" +
    "\002\000\004\061\033\001\002\000\004\016\034\001\002" +
    "\000\004\016\uffe8\001\002\000\010\057\037\060\035\062" +
    "\040\001\002\000\006\007\uffeb\012\uffeb\001\002\000\006" +
    "\007\uffec\012\041\001\002\000\006\007\uffe9\012\uffe9\001" +
    "\002\000\006\007\uffea\012\uffea\001\002\000\004\061\033" +
    "\001\002\000\004\007\043\001\002\000\012\005\uffee\022" +
    "\uffee\023\uffee\061\uffee\001\002\000\004\016\045\001\002" +
    "\000\010\057\037\060\035\062\040\001\002\000\006\007" +
    "\uffec\012\041\001\002\000\004\007\uffed\001\002\000\006" +
    "\005\051\026\052\001\002\000\012\005\uffe2\006\uffe2\031" +
    "\uffe2\061\uffe2\001\002\000\004\061\023\001\002\000\004" +
    "\005\054\001\002\000\012\005\uffe2\006\uffe2\031\uffe2\061" +
    "\uffe2\001\002\000\012\005\uffe0\006\uffe0\031\057\061\uffe0" +
    "\001\002\000\010\005\313\006\uffde\061\uffde\001\002\000" +
    "\006\005\063\061\023\001\002\000\012\005\uffe0\006\uffe0" +
    "\031\062\061\uffe0\001\002\000\010\005\uffe1\006\uffe1\061" +
    "\uffe1\001\002\000\004\005\063\001\002\000\032\003\uffdb" +
    "\005\uffdb\006\uffdb\013\uffdb\014\uffdb\021\uffdb\025\uffdb\027" +
    "\uffdb\030\uffdb\054\uffdb\061\uffdb\063\uffdb\001\002\000\032" +
    "\003\104\005\075\006\071\013\103\014\073\021\100\025" +
    "\066\027\067\030\106\054\077\061\070\063\074\001\002" +
    "\000\016\010\305\016\302\047\303\050\304\053\206\054" +
    "\207\001\002\000\004\010\275\001\002\000\004\007\274" +
    "\001\002\000\062\007\uff8d\010\uff8d\011\uff8d\012\uff8d\015" +
    "\uff8d\016\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\050\uff8d\051\270\053\uff8d\054\uff8d\055\uff8d" +
    "\001\002\000\012\005\uffdd\006\uffdd\031\uffdd\061\uffdd\001" +
    "\002\000\004\007\267\001\002\000\030\003\127\007\uffb6" +
    "\010\123\020\120\024\130\033\126\052\124\057\131\060" +
    "\125\061\070\062\117\001\002\000\004\010\244\001\002" +
    "\000\032\003\uffdb\005\uffdb\006\uffdb\013\uffdb\014\uffdb\021" +
    "\uffdb\025\uffdb\027\uffdb\030\uffdb\054\uffdb\061\uffdb\063\uffdb" +
    "\001\002\000\060\007\uff8f\010\uff8f\011\uff8f\012\uff8f\015" +
    "\uff8f\016\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\053\uff8f\054\uff8f\055\uff8f\001\002" +
    "\000\012\003\127\012\uff73\034\uff75\061\070\001\002\000" +
    "\004\007\227\001\002\000\060\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\015\uff90\016\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\053\uff90\054\uff90\055" +
    "\uff90\001\002\000\032\003\uffc5\005\uffc5\006\uffc5\013\uffc5" +
    "\014\uffc5\021\uffc5\025\uffc5\027\uffc5\030\uffc5\054\uffc5\061" +
    "\uffc5\063\uffc5\001\002\000\004\010\220\001\002\000\024" +
    "\007\uff79\010\uff8e\011\uff79\012\uff79\016\uff8e\047\uff8e\050" +
    "\uff8e\053\uff8e\054\uff8e\001\002\000\032\003\uffdc\005\uffdc" +
    "\006\uffdc\013\uffdc\014\uffdc\021\uffdc\025\uffdc\027\uffdc\030" +
    "\uffdc\054\uffdc\061\uffdc\063\uffdc\001\002\000\004\010\110" +
    "\001\002\000\032\003\uffc6\005\uffc6\006\uffc6\013\uffc6\014" +
    "\uffc6\021\uffc6\025\uffc6\027\uffc6\030\uffc6\054\uffc6\061\uffc6" +
    "\063\uffc6\001\002\000\012\003\104\007\uffb2\054\077\061" +
    "\070\001\002\000\010\007\uffb0\011\uffb0\012\uffb0\001\002" +
    "\000\004\007\113\001\002\000\030\003\127\007\uffb8\010" +
    "\123\020\120\024\130\033\126\052\124\057\131\060\125" +
    "\061\070\062\117\001\002\000\052\007\uff9d\010\205\011" +
    "\uff9d\012\uff9d\015\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\053\206\054\207\055\uff9d\001\002\000\004" +
    "\007\201\001\002\000\044\007\uff9e\011\uff9e\012\uff9e\015" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\055" +
    "\uff9e\001\002\000\044\007\uff9b\011\uff9b\012\uff9b\015\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\055\uff9b" +
    "\001\002\000\004\010\170\001\002\000\004\007\uffb9\001" +
    "\002\000\026\007\uffa6\011\uffa6\037\160\040\164\041\161" +
    "\042\166\043\163\044\162\045\uffa6\046\uffa6\001\002\000" +
    "\026\003\127\010\123\020\120\024\130\033\126\052\124" +
    "\057\131\060\125\061\070\062\117\001\002\000\044\007" +
    "\uff94\011\uff94\012\uff94\015\uff94\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\055\uff94\001\002\000\044\007\uff9c" +
    "\011\uff9c\012\uff9c\015\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\055\uff9c\001\002\000\024\003\127\010" +
    "\123\020\120\024\130\052\124\057\131\060\125\061\070" +
    "\062\117\001\002\000\052\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\015\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\001\002\000\006\010\141" +
    "\061\023\001\002\000\044\007\uff9a\011\uff9a\012\uff9a\015" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\055" +
    "\uff9a\001\002\000\036\007\uffa1\011\uffa1\012\uffa1\015\uffa1" +
    "\033\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\055\uffa1\001\002\000\036\007\uffa3" +
    "\011\uffa3\012\uffa3\015\134\033\135\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\055\uffa3" +
    "\001\002\000\024\003\uff83\010\uff83\020\uff83\024\uff83\052" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\001\002\000\024" +
    "\003\uff82\010\uff82\020\uff82\024\uff82\052\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\001\002\000\024\003\127\010\123" +
    "\020\120\024\130\052\124\057\131\060\125\061\070\062" +
    "\117\001\002\000\036\007\uffa2\011\uffa2\012\uffa2\015\uffa2" +
    "\033\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\055\uffa2\001\002\000\004\054\151" +
    "\001\002\000\030\003\127\010\123\011\uff92\020\120\024" +
    "\130\033\126\052\124\057\131\060\125\061\070\062\117" +
    "\001\002\000\004\011\150\001\002\000\006\011\uffad\012" +
    "\uffad\001\002\000\004\011\uff93\001\002\000\006\011\uffaf" +
    "\012\146\001\002\000\026\003\127\010\123\020\120\024" +
    "\130\033\126\052\124\057\131\060\125\061\070\062\117" +
    "\001\002\000\006\011\uffae\012\uffae\001\002\000\044\007" +
    "\uff98\011\uff98\012\uff98\015\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\055\uff98\001\002\000\026\003\127" +
    "\010\123\020\120\024\130\033\126\052\124\057\131\060" +
    "\125\061\070\062\117\001\002\000\004\055\153\001\002" +
    "\000\044\007\uff99\011\uff99\012\uff99\015\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\055\uff99\001\002\000" +
    "\036\007\uffa1\011\uffa1\012\uffa1\015\uffa1\033\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\055\uffa1\001\002\000\036\007\uffa4\011\uffa4\012\uffa4" +
    "\015\134\033\135\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\055\uffa4\001\002\000\004" +
    "\011\157\001\002\000\044\007\uff97\011\uff97\012\uff97\015" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\055" +
    "\uff97\001\002\000\026\003\uff89\010\uff89\020\uff89\024\uff89" +
    "\033\uff89\052\uff89\057\uff89\060\uff89\061\uff89\062\uff89\001" +
    "\002\000\026\003\uff87\010\uff87\020\uff87\024\uff87\033\uff87" +
    "\052\uff87\057\uff87\060\uff87\061\uff87\062\uff87\001\002\000" +
    "\026\003\uff84\010\uff84\020\uff84\024\uff84\033\uff84\052\uff84" +
    "\057\uff84\060\uff84\061\uff84\062\uff84\001\002\000\026\003" +
    "\uff85\010\uff85\020\uff85\024\uff85\033\uff85\052\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\001\002\000\026\003\uff88\010" +
    "\uff88\020\uff88\024\uff88\033\uff88\052\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\001\002\000\026\003\127\010\123\020" +
    "\120\024\130\033\126\052\124\057\131\060\125\061\070" +
    "\062\117\001\002\000\026\003\uff86\010\uff86\020\uff86\024" +
    "\uff86\033\uff86\052\uff86\057\uff86\060\uff86\061\uff86\062\uff86" +
    "\001\002\000\012\007\uffa5\011\uffa5\045\uffa5\046\uffa5\001" +
    "\002\000\026\003\127\010\123\020\120\024\130\033\126" +
    "\052\124\057\131\060\125\061\070\062\117\001\002\000" +
    "\004\011\172\001\002\000\044\007\uff95\011\uff95\012\uff95" +
    "\015\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\055\uff95\001\002\000\044\007\uffa0\011\uffa0\012\uffa0\015" +
    "\uffa0\033\uffa0\034\175\035\176\036\174\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\055" +
    "\uffa0\001\002\000\024\003\uff7f\010\uff7f\020\uff7f\024\uff7f" +
    "\052\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\001\002\000" +
    "\024\003\uff81\010\uff81\020\uff81\024\uff81\052\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\001\002\000\024\003\uff80\010" +
    "\uff80\020\uff80\024\uff80\052\uff80\057\uff80\060\uff80\061\uff80" +
    "\062\uff80\001\002\000\024\003\127\010\123\020\120\024" +
    "\130\052\124\057\131\060\125\061\070\062\117\001\002" +
    "\000\044\007\uff9f\011\uff9f\012\uff9f\015\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\055\uff9f\001\002\000" +
    "\012\003\104\011\uffb2\054\077\061\070\001\002\000\004" +
    "\011\203\001\002\000\030\003\104\005\075\013\103\014" +
    "\073\021\100\025\066\027\067\030\106\054\077\061\070" +
    "\063\074\001\002\000\032\003\uffc4\005\uffc4\006\uffc4\013" +
    "\uffc4\014\uffc4\021\uffc4\025\uffc4\027\uffc4\030\uffc4\054\uffc4" +
    "\061\uffc4\063\uffc4\001\002\000\030\003\127\010\123\011" +
    "\uff92\020\120\024\130\033\126\052\124\057\131\060\125" +
    "\061\070\062\117\001\002\000\004\061\212\001\002\000" +
    "\026\003\127\010\123\020\120\024\130\033\126\052\124" +
    "\057\131\060\125\061\070\062\117\001\002\000\004\055" +
    "\211\001\002\000\060\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\015\uff8b\016\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\053\uff8b\054\uff8b\055\uff8b\001" +
    "\002\000\060\007\uff8c\010\uff8c\011\uff8c\012\uff8c\015\uff8c" +
    "\016\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\053\uff8c\054\uff8c\055\uff8c\001\002\000" +
    "\004\011\214\001\002\000\044\007\uff96\011\uff96\012\uff96" +
    "\015\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\055\uff96\001\002\000\010\007\uffb3\011\uffb3\012\216\001" +
    "\002\000\010\003\104\054\077\061\070\001\002\000\010" +
    "\007\uffb1\011\uffb1\012\uffb1\001\002\000\026\003\127\010" +
    "\123\020\120\024\130\033\126\052\124\057\131\060\125" +
    "\061\070\062\117\001\002\000\006\011\uffb4\012\222\001" +
    "\002\000\004\060\226\001\002\000\004\011\224\001\002" +
    "\000\004\007\225\001\002\000\034\003\uffba\005\uffba\006" +
    "\uffba\013\uffba\014\uffba\021\uffba\025\uffba\027\uffba\030\uffba" +
    "\054\uffba\061\uffba\063\uffba\064\uffba\001\002\000\004\011" +
    "\uffb5\001\002\000\034\003\uffbe\005\uffbe\006\uffbe\013\uffbe" +
    "\014\uffbe\021\uffbe\025\uffbe\027\uffbe\030\uffbe\054\uffbe\061" +
    "\uffbe\063\uffbe\064\uffbe\001\002\000\004\012\240\001\002" +
    "\000\004\034\233\001\002\000\010\012\uff74\053\206\054" +
    "\207\001\002\000\006\003\127\061\070\001\002\000\010" +
    "\053\206\054\207\055\235\001\002\000\004\016\236\001" +
    "\002\000\006\003\127\061\070\001\002\000\014\007\uff7a" +
    "\011\uff7a\012\uff7a\053\206\054\207\001\002\000\012\003" +
    "\127\012\uff73\034\uff75\061\070\001\002\000\004\034\uff76" +
    "\001\002\000\032\003\104\005\075\006\243\013\103\014" +
    "\073\021\100\025\066\027\067\030\106\054\077\061\070" +
    "\063\074\001\002\000\032\003\uffc3\005\uffc3\006\uffc3\013" +
    "\uffc3\014\uffc3\021\uffc3\025\uffc3\027\uffc3\030\uffc3\054\uffc3" +
    "\061\uffc3\063\uffc3\001\002\000\026\003\127\010\123\020" +
    "\120\024\130\033\126\052\124\057\131\060\125\061\070" +
    "\062\117\001\002\000\010\011\uffa7\045\uffa7\046\uffa7\001" +
    "\002\000\006\011\uffaa\046\uffaa\001\002\000\004\011\250" +
    "\001\002\000\030\003\104\005\075\013\103\014\073\021" +
    "\100\025\066\027\067\030\106\054\077\061\070\063\074" +
    "\001\002\000\032\003\uffc2\005\uffc2\006\uffc2\013\uffc2\014" +
    "\uffc2\021\uffc2\025\uffc2\027\uffc2\030\uffc2\054\uffc2\061\uffc2" +
    "\063\uffc2\001\002\000\034\003\uffc6\005\uffc6\006\uffc6\013" +
    "\uffc6\014\uffc6\021\uffc6\025\uffc6\027\uffc6\030\uffc6\054\uffc6" +
    "\061\uffc6\063\uffc6\064\253\001\002\000\024\003\104\013" +
    "\103\014\073\021\100\025\066\027\067\054\077\061\070" +
    "\063\074\001\002\000\032\003\uffc1\005\uffc1\006\uffc1\013" +
    "\uffc1\014\uffc1\021\uffc1\025\uffc1\027\uffc1\030\uffc1\054\uffc1" +
    "\061\uffc1\063\uffc1\001\002\000\034\003\uffbf\005\uffbf\006" +
    "\uffbf\013\uffbf\014\uffbf\021\uffbf\025\uffbf\027\uffbf\030\uffbf" +
    "\054\uffbf\061\uffbf\063\uffbf\064\uffbf\001\002\000\006\011" +
    "\uffac\046\257\001\002\000\026\003\127\010\123\020\120" +
    "\024\130\033\126\052\124\057\131\060\125\061\070\062" +
    "\117\001\002\000\006\011\uffab\046\uffab\001\002\000\010" +
    "\011\uffa9\045\262\046\uffa9\001\002\000\026\003\127\010" +
    "\123\020\120\024\130\033\126\052\124\057\131\060\125" +
    "\061\070\062\117\001\002\000\010\011\uffa8\045\uffa8\046" +
    "\uffa8\001\002\000\004\007\uffb7\001\002\000\004\007\266" +
    "\001\002\000\034\003\uffbc\005\uffbc\006\uffbc\013\uffbc\014" +
    "\uffbc\021\uffbc\025\uffbc\027\uffbc\030\uffbc\054\uffbc\061\uffbc" +
    "\063\uffbc\064\uffbc\001\002\000\034\003\uffc0\005\uffc0\006" +
    "\uffc0\013\uffc0\014\uffc0\021\uffc0\025\uffc0\027\uffc0\030\uffc0" +
    "\054\uffc0\061\uffc0\063\uffc0\064\uffc0\001\002\000\004\051" +
    "\271\001\002\000\004\061\273\001\002\000\060\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\015\uff91\016\uff91\033\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\053" +
    "\uff91\054\uff91\055\uff91\001\002\000\060\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\015\uff8d\016\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\001\002\000\034\003\uffbd\005\uffbd\006\uffbd" +
    "\013\uffbd\014\uffbd\021\uffbd\025\uffbd\027\uffbd\030\uffbd\054" +
    "\uffbd\061\uffbd\063\uffbd\064\uffbd\001\002\000\006\003\127" +
    "\061\070\001\002\000\010\011\277\053\206\054\207\001" +
    "\002\000\004\007\300\001\002\000\034\003\uffbb\005\uffbb" +
    "\006\uffbb\013\uffbb\014\uffbb\021\uffbb\025\uffbb\027\uffbb\030" +
    "\uffbb\054\uffbb\061\uffbb\063\uffbb\064\uffbb\001\002\000\026" +
    "\003\127\010\123\020\120\024\130\033\126\052\124\057" +
    "\131\060\125\061\070\062\117\001\002\000\026\003\uff8a" +
    "\010\uff8a\020\uff8a\024\uff8a\033\uff8a\052\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\001\002\000\010\007\uff7c\011\uff7c" +
    "\012\uff7c\001\002\000\010\007\uff7b\011\uff7b\012\uff7b\001" +
    "\002\000\030\003\127\010\123\011\uff77\020\120\024\130" +
    "\033\126\052\124\057\131\060\125\061\070\062\117\001" +
    "\002\000\004\011\310\001\002\000\004\011\uff78\001\002" +
    "\000\010\007\uff7d\011\uff7d\012\uff7d\001\002\000\010\007" +
    "\uff7e\011\uff7e\012\uff7e\001\002\000\012\005\uffe3\006\uffe3" +
    "\031\uffe3\061\uffe3\001\002\000\010\006\uffd1\017\uffd1\061" +
    "\uffd1\001\002\000\006\006\316\061\023\001\002\000\010" +
    "\005\uffdf\006\uffdf\061\uffdf\001\002\000\012\005\uffe5\022" +
    "\uffe5\023\uffe5\061\uffe5\001\002\000\010\006\322\017\324" +
    "\061\023\001\002\000\004\061\326\001\002\000\004\061" +
    "\uffd9\001\002\000\004\006\325\001\002\000\010\006\uffd2" +
    "\017\uffd2\061\uffd2\001\002\000\004\061\uffd8\001\002\000" +
    "\012\005\uffe4\022\uffe4\023\uffe4\061\uffe4\001\002\000\004" +
    "\010\uffd7\001\002\000\004\010\330\001\002\000\010\003" +
    "\334\011\uffd5\061\023\001\002\000\006\011\uffcf\012\uffcf" +
    "\001\002\000\006\011\uffd0\012\351\001\002\000\004\061" +
    "\345\001\002\000\006\011\uffcc\012\uffcc\001\002\000\004" +
    "\011\uffd6\001\002\000\004\011\337\001\002\000\006\005" +
    "\uffde\061\uffde\001\002\000\006\005\341\061\023\001\002" +
    "\000\032\003\uffd3\005\uffd3\006\uffd3\013\uffd3\014\uffd3\021" +
    "\uffd3\025\uffd3\027\uffd3\030\uffd3\054\uffd3\061\uffd3\063\uffd3" +
    "\001\002\000\032\003\104\005\075\006\343\013\103\014" +
    "\073\021\100\025\066\027\067\030\106\054\077\061\070" +
    "\063\074\001\002\000\010\006\uffda\017\uffda\061\uffda\001" +
    "\002\000\032\003\uffd4\005\uffd4\006\uffd4\013\uffd4\014\uffd4" +
    "\021\uffd4\025\uffd4\027\uffd4\030\uffd4\054\uffd4\061\uffd4\063" +
    "\uffd4\001\002\000\010\011\uffca\012\uffca\054\347\001\002" +
    "\000\006\011\uffcd\012\uffcd\001\002\000\004\055\350\001" +
    "\002\000\006\011\uffcb\012\uffcb\001\002\000\006\003\334" +
    "\061\023\001\002\000\006\011\uffce\012\uffce\001\002\000" +
    "\012\005\uffe0\006\uffe0\031\057\061\uffe0\001\002\000\010" +
    "\005\uffde\006\uffde\061\uffde\001\002\000\010\005\356\006" +
    "\357\061\023\001\002\000\010\006\uffd1\017\uffd1\061\uffd1" +
    "\001\002\000\012\005\uffe7\022\uffe7\023\uffe7\061\uffe7\001" +
    "\002\000\010\006\361\017\324\061\023\001\002\000\004" +
    "\006\362\001\002\000\012\005\uffe6\022\uffe6\023\uffe6\061" +
    "\uffe6\001\002\000\004\051\365\001\002\000\012\003\uffc9" +
    "\005\uffc9\054\uffc9\061\uffc9\001\002\000\004\061\366\001" +
    "\002\000\012\003\uffc8\005\uffc8\054\uffc8\061\uffc8\001\002" +
    "\000\010\006\370\017\324\061\023\001\002\000\004\006" +
    "\371\001\002\000\014\005\ufffc\022\ufffc\023\ufffc\032\ufffc" +
    "\061\ufffc\001\002\000\006\007\ufff2\012\ufff2\001\002\000" +
    "\010\007\uffef\012\uffef\054\u0102\001\002\000\010\007\ufff1" +
    "\012\ufff1\054\ufff1\001\002\000\006\007\377\012\376\001" +
    "\002\000\004\061\374\001\002\000\016\005\ufff5\006\ufff5" +
    "\022\ufff5\023\ufff5\031\ufff5\061\ufff5\001\002\000\010\007" +
    "\uffef\012\uffef\054\u0102\001\002\000\006\007\ufff4\012\ufff4" +
    "\001\002\000\004\055\u0103\001\002\000\006\007\ufff0\012" +
    "\ufff0\001\002\000\006\007\ufff3\012\ufff3\001\002\000\010" +
    "\006\uffd1\017\uffd1\061\uffd1\001\002\000\010\006\u0107\017" +
    "\324\061\023\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\067\003\001\001\000\002\001\001\000" +
    "\004\066\006\001\001\000\002\001\001\000\004\011\007" +
    "\001\001\000\006\010\010\061\012\001\001\000\014\003" +
    "\023\014\025\015\024\060\020\073\017\001\001\000\004" +
    "\077\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\016\001\001\000\014\003\023" +
    "\014\025\015\024\060\020\073\017\001\001\000\006\013" +
    "\374\064\372\001\001\000\002\001\001\000\004\022\366" +
    "\001\001\000\004\063\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\030\001\001\000\004\065\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\035\001\001\000\002" +
    "\001\001\000\004\016\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\045\001" +
    "\001\000\004\016\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\352\001\001\000\004\073\052\001" +
    "\001\000\002\001\001\000\004\023\054\001\001\000\006" +
    "\024\055\027\057\001\001\000\004\026\313\001\001\000" +
    "\006\003\311\073\017\001\001\000\006\024\060\027\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\063\001\001\000\020\035\101\040\106\041\104\054\071" +
    "\057\100\072\064\102\075\001\001\000\004\036\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\034\264\057" +
    "\100\072\113\074\131\075\263\102\075\103\115\001\001" +
    "\000\002\001\001\000\004\007\241\001\001\000\002\001" +
    "\001\000\014\056\230\057\100\062\227\072\231\102\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\111\054" +
    "\110\057\100\072\064\102\075\001\001\000\004\031\214" +
    "\001\001\000\002\001\001\000\022\030\114\045\120\057" +
    "\100\072\113\074\131\075\121\102\075\103\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\164\001\001\000\016\057\100\072\113\074" +
    "\131\075\155\102\075\103\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\057\100\072\113\074\153\102" +
    "\075\103\115\001\001\000\002\001\001\000\004\073\137" +
    "\001\001\000\002\001\001\000\004\101\132\001\001\000" +
    "\004\043\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\057\100\072\113\074\136\102\075\103\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\141" +
    "\053\143\057\100\072\113\074\131\075\142\102\075\103" +
    "\115\001\001\000\002\001\001\000\004\052\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\057\100\072" +
    "\113\074\131\075\146\102\075\103\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\057\100\072\113\074" +
    "\131\075\151\102\075\103\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\154\001\001\000\004\043" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\057\100\072\113\074\131" +
    "\075\166\102\075\103\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\057\100\072\113\074\131\075\170" +
    "\102\075\103\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\057\100\072\113\102" +
    "\075\103\177\001\001\000\002\001\001\000\014\032\201" +
    "\054\110\057\100\072\064\102\075\001\001\000\002\001" +
    "\001\000\020\035\101\040\106\041\203\054\071\057\100" +
    "\072\064\102\075\001\001\000\002\001\001\000\022\037" +
    "\212\053\143\057\100\072\113\074\131\075\142\102\075" +
    "\103\115\001\001\000\002\001\001\000\016\057\100\072" +
    "\113\074\131\075\207\102\075\103\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\216" +
    "\057\100\072\064\102\075\001\001\000\002\001\001\000" +
    "\016\057\100\072\113\074\131\075\220\102\075\103\115" +
    "\001\001\000\004\033\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\100\072\233\102\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\100\072\236\102\075\001\001\000\002\001\001\000\014" +
    "\056\240\057\100\062\227\072\231\102\075\001\001\000" +
    "\002\001\001\000\020\035\101\040\106\041\104\054\071" +
    "\057\100\072\064\102\075\001\001\000\002\001\001\000" +
    "\024\045\244\047\245\051\246\057\100\072\113\074\131" +
    "\075\121\102\075\103\115\001\001\000\004\046\260\001" +
    "\001\000\004\050\255\001\001\000\002\001\001\000\020" +
    "\035\101\040\251\041\250\054\071\057\100\072\064\102" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\253\040\254\054\071\057\100\072\064\102\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\045\244\047\257\057\100\072\113\074\131\075" +
    "\121\102\075\103\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\045\262\057\100\072\113\074\131\075" +
    "\121\102\075\103\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\100\072\275\102\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\057\100\072\113\074" +
    "\131\075\310\102\075\103\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\053\306\055" +
    "\305\057\100\072\113\074\131\075\142\102\075\103\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\316" +
    "\001\001\000\006\003\314\073\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\317\070\322\073\320" +
    "\001\001\000\004\071\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\331\005\330\006\334\017\335\073\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\337" +
    "\001\001\000\006\003\314\073\017\001\001\000\004\020" +
    "\341\001\001\000\020\035\101\040\106\041\343\054\071" +
    "\057\100\072\064\102\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\351\073" +
    "\332\001\001\000\002\001\001\000\006\024\353\027\057" +
    "\001\001\000\004\026\354\001\001\000\006\003\314\073" +
    "\017\001\001\000\004\022\357\001\001\000\002\001\001" +
    "\000\010\025\317\070\322\073\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\317\070" +
    "\322\073\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\377\001\001\000\002" +
    "\001\001\000\004\012\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0105\001\001\000\010\025\317\070\322\073\320\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OptinalDesignator ::= 
            {
              OptinalDesignator RESULT = null;
		 RESULT=new NoDesign(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*OptinalDesignator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OptinalDesignator ::= Designator 
            {
              OptinalDesignator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Design(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*OptinalDesignator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OptDesignatorList ::= 
            {
              OptDesignatorList RESULT = null;
		 RESULT=new NoDesignatorLists(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*OptDesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OptDesignatorList ::= OptinalDesignator COMMA OptDesignatorList 
            {
              OptDesignatorList RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptinalDesignator O1 = (OptinalDesignator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptDesignatorList O2 = (OptDesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorLists(O1, O2); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*OptDesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OptActPars ::= 
            {
              OptActPars RESULT = null;
		 RESULT=new NoDesignatorOptAP(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*OptActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OptActPars ::= ActPars 
            {
              OptActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorOptAP(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*OptActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DesignatorStatement ::= error 
            {
              DesignatorStatement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
			             parser.report_error("Uspesan oporavak od greske na liniji " + sleft + " pri konstrukciji iskaza dodele", null); 
			              RESULT=new DesignatorStatementDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DesignatorStatement ::= LSQBRACK OptDesignatorList MUL Designator RSQBRACK EQUAL Designator 
            {
              DesignatorStatement RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		OptDesignatorList O1 = (OptDesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D2 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D3 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorRest(O1, D2, D3); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DesignatorStatement ::= Designator LPAREN OptActPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptActPars O2 = (OptActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorOptActPars(D1, O2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DesignatorStatement ::= Designator Assignop Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new MulMod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new MulDivide(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new MulMultiply(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddMinus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddPlus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= LEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelLessEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new RelLess(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= GREQ 
            {
              Relop RESULT = null;
		 RESULT=new RelGreaterEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new RelGreater(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= NEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelNotEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= EQ 
            {
              Relop RESULT = null;
		 RESULT=new RelEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Assignop ::= EQUAL 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorRestList ::= Designator LSQBRACK Expr RSQBRACK 
            {
              DesignatorRestList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorRestArray(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*DesignatorRestList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DesignatorRestList ::= Designator PERIOD IDENT 
            {
              DesignatorRestList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorRestDot(D1, I2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*DesignatorRestList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DesignatorName ::= IDENT 
            {
              DesignatorName RESULT = null;
		int Nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int Nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String Name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorName(Name); RESULT.setLine(Nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Designator ::= error 
            {
              Designator RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				 parser.report_error("Uspesan oporavak od greske na liniji " + sleft + " pri konstrukciji iskaza dodele", null); 
				  RESULT=new DesignatorDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Designator ::= DesignatorRestList 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorRestList D1 = (DesignatorRestList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorList(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Designator ::= DesignatorName 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorName D1 = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNoNameSpace(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Designator ::= IDENT COLON COLON DesignatorName 
            {
              Designator RESULT = null;
		int nsNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nsNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String nsName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorName D1 = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNameSpace(nsName, D1); RESULT.setLine(nsNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptionalActPars ::= 
            {
              OptionalActPars RESULT = null;
		 RESULT=new NoOptionalAP(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*OptionalActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptionalActPars ::= ActPars 
            {
              OptionalActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptionalAP(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*OptionalActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= EOL 
            {
              Factor RESULT = null;
		 RESULT=new FactEol(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= RANG LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new RangeCall(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= Designator LPAREN OptionalActPars RPAREN 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalActPars O2 = (OptionalActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCall(D1, O2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= NEW LPAREN OptionalActPars RPAREN 
            {
              Factor RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalActPars O1 = (OptionalActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactNObj(O1); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NEW Type LSQBRACK Expr RSQBRACK 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactNTE(T1, E2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactBool(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		char C1 = (char)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactChar(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactNum(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactDesign(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MoreFactors ::= 
            {
              MoreFactors RESULT = null;
		 RESULT=new NoMoreFact(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*MoreFactors*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MoreFactors ::= MoreFactors Mulop Factor 
            {
              MoreFactors RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreFactors M1 = (MoreFactors)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MulExpr(M1, M2, F3); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*MoreFactors*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Term ::= Factor MoreFactors 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreFactors M2 = (MoreFactors)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term(F1, M2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MoreTerms ::= 
            {
              MoreTerms RESULT = null;
		 RESULT=new NoMoreTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*MoreTerms*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MoreTerms ::= MoreTerms Addop Term 
            {
              MoreTerms RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreTerms M1 = (MoreTerms)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AddExpr(M1, A2, T3); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*MoreTerms*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Term MoreTerms 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreTerms M2 = (MoreTerms)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprNoMinus(T1, M2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Term MoreTerms 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreTerms M2 = (MoreTerms)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprMinus(T1, M2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ComplexCondFact(E1, R2, E3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SimpleCondFact(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MoreCondFacts ::= 
            {
              MoreCondFacts RESULT = null;
		 RESULT=new NoMoreCondFact(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*MoreCondFacts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MoreCondFacts ::= MoreCondFacts AND CondFact 
            {
              MoreCondFacts RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreCondFacts M1 = (MoreCondFacts)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MoreCondFact(M1, C2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*MoreCondFacts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact MoreCondFacts 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreCondFacts M2 = (MoreCondFacts)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(C1, M2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MoreCondTerms ::= 
            {
              MoreCondTerms RESULT = null;
		 RESULT=new NoMoreCondTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*MoreCondTerms*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MoreCondTerms ::= MoreCondTerms OR CondTerm 
            {
              MoreCondTerms RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreCondTerms M1 = (MoreCondTerms)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MoreCondTerm(M1, C2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*MoreCondTerms*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTerm MoreCondTerms 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreCondTerms M2 = (MoreCondTerms)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(C1, M2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MoreExprs ::= 
            {
              MoreExprs RESULT = null;
		 RESULT=new NoMoreE(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*MoreExprs*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MoreExprs ::= MoreExprs COMMA Expr 
            {
              MoreExprs RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreExprs M1 = (MoreExprs)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MoreE(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*MoreExprs*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActPars ::= Expr MoreExprs 
            {
              ActPars RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreExprs M2 = (MoreExprs)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActPars(E1, M2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MoreDesignatorStmts ::= 
            {
              MoreDesignatorStmts RESULT = null;
		 RESULT=new NoMoreDesignatorStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*MoreDesignatorStmts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MoreDesignatorStmts ::= MoreDesignatorStmts COMMA DesignatorStatement 
            {
              MoreDesignatorStmts RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MoreDesignatorStmts M1 = (MoreDesignatorStmts)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D2 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MoreDesignatorStmt(M1, D2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*MoreDesignatorStmts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptionalDesignatorStmtList ::= 
            {
              OptionalDesignatorStmtList RESULT = null;
		 RESULT=new NoOptDesignaStmttorList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*OptionalDesignatorStmtList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptionalDesignatorStmtList ::= DesignatorStatement MoreDesignatorStmts 
            {
              OptionalDesignatorStmtList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MoreDesignatorStmts M2 = (MoreDesignatorStmts)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptDesignatorStmtList(D1, M2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*OptionalDesignatorStmtList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptionalPrintParam ::= 
            {
              OptionalPrintParam RESULT = null;
		 RESULT=new NoPrintParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*OptionalPrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptionalPrintParam ::= COMMA NUMBER 
            {
              OptionalPrintParam RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintParam(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*OptionalPrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptionalExpr ::= 
            {
              OptionalExpr RESULT = null;
		 RESULT=new NoOptExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptionalExpr ::= Expr 
            {
              OptionalExpr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptionalCondFact ::= 
            {
              OptionalCondFact RESULT = null;
		 RESULT=new NoOptCondFact(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*OptionalCondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptionalCondFact ::= CondFact 
            {
              OptionalCondFact RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptCondFact(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*OptionalCondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= PRINT LPAREN Expr OptionalPrintParam RPAREN SEMI 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptionalPrintParam O2 = (OptionalPrintParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStmt(E1, O2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= RETURN OptionalExpr SEMI 
            {
              Matched RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalExpr O1 = (OptionalExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnStmt(O1); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= CONTINUE SEMI 
            {
              Matched RESULT = null;
		 RESULT=new ContinueStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new BreakStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Matched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfStmt(C1, M2, M3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= DesignatorStatement SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StmtList(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= FOR LPAREN OptionalDesignatorStmtList SEMI OptionalCondFact SEMI OptionalDesignatorStmtList RPAREN Statement 
            {
              Statement RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		OptionalDesignatorStmtList O1 = (OptionalDesignatorStmtList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		OptionalCondFact O2 = (OptionalCondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptionalDesignatorStmtList O3 = (OptionalDesignatorStmtList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S4 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForStmt(O1, O2, O3, S4); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TypeNamespName ::= 
            {
              TypeNamespName RESULT = null;
		 RESULT=new TypeNamespNameDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*TypeNamespName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TypeNamespName ::= COLON COLON IDENT 
            {
              TypeNamespName RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeNamespNameDerived1(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*TypeNamespName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= IDENT TypeNamespName 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TypeNamespName T1 = (TypeNamespName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName, T1); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptionalArray ::= 
            {
              OptionalArray RESULT = null;
		 RESULT=new NoArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*OptionalArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OptionalArray ::= LSQBRACK RSQBRACK 
            {
              OptionalArray RESULT = null;
		 RESULT=new Array(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*OptionalArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParamItem ::= error 
            {
              FormParamItem RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
			        parser.report_error("Uspesan oporavak od greske na liniji " + sleft +" pri deklaraciji formalnog parametra funkcije", null); 
			     RESULT=new FormParamItemDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*FormParamItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParamItem ::= Type IDENT OptionalArray 
            {
              FormParamItem RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalArray O3 = (OptionalArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamItemDerived1(T1, I2, O3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*FormParamItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParamList ::= FormParamList COMMA FormParamItem 
            {
              FormParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormParamList F1 = (FormParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamItem F2 = (FormParamItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormList(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*FormParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParamList ::= FormParamItem 
            {
              FormParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamItem F1 = (FormParamItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormItem(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*FormParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= FormParamList 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamList F1 = (FormParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormPars(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodStatementList ::= 
            {
              MethodStatementList RESULT = null;
		 RESULT=new NoMethodStmtList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*MethodStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodStatementList ::= MethodStatementList Statement 
            {
              MethodStatementList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodStatementList M1 = (MethodStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodStmtList(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*MethodStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptionalFormPars ::= 
            {
              OptionalFormPars RESULT = null;
		 RESULT=new NoPars(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*OptionalFormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OptionalFormPars ::= FormPars 
            {
              OptionalFormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Pars(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*OptionalFormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodName ::= IDENT 
            {
              MethodName RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*MethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodReturnType ::= VOID 
            {
              MethodReturnType RESULT = null;
		 RESULT=new MethodVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodReturnType ::= Type 
            {
              MethodReturnType RESULT = null;
		int methodTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type methodType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodType(methodType); RESULT.setLine(methodTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= MethodReturnType MethodName LPAREN OptionalFormPars RPAREN VarDeclarList LBRACE MethodStatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		MethodReturnType M1 = (MethodReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodName M2 = (MethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		OptionalFormPars O3 = (OptionalFormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclarList V4 = (VarDeclarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodStatementList M5 = (MethodStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, M2, O3, V4, M5); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatList(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StaticInitializer ::= STATIC LBRACE StatementList RBRACE 
            {
              StaticInitializer RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StaticInitializer(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*StaticInitializer*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclarList ::= 
            {
              VarDeclarList RESULT = null;
		 RESULT=new NoVarDeclarationList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*VarDeclarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarDeclarList ::= VarDeclarList VarDecl 
            {
              VarDeclarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclarList V1 = (VarDeclarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*VarDeclarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StaticInitializerList ::= 
            {
              StaticInitializerList RESULT = null;
		 RESULT=new NoStatInitList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*StaticInitializerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StaticInitializerList ::= StaticInitializer StaticInitializerList 
            {
              StaticInitializerList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticInitializer S1 = (StaticInitializer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializerList S2 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatInitList(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*StaticInitializerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StaticVarDeclList ::= 
            {
              StaticVarDeclList RESULT = null;
		 RESULT=new NoStatVarList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*StaticVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StaticVarDeclList ::= StaticVarDeclList STATIC VarDecl 
            {
              StaticVarDeclList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticVarDeclList S1 = (StaticVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatVarList(S1, V2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*StaticVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT EXT Type LBRACE StaticVarDeclList StaticInitializerList LBRACE MethodDeclList RBRACE RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Type T2 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		StaticVarDeclList S3 = (StaticVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		StaticInitializerList S4 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MethodDeclList M5 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ClExtMethod(I1, T2, S3, S4, M5); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT EXT Type LBRACE StaticVarDeclList StaticInitializerList VarDeclarList RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Type T2 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		StaticVarDeclList S3 = (StaticVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticInitializerList S4 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclarList V5 = (VarDeclarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClExtVar(I1, T2, S3, S4, V5); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT LBRACE StaticVarDeclList StaticInitializerList VarDeclarList LBRACE MethodDeclList RBRACE RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		StaticVarDeclList S2 = (StaticVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		StaticInitializerList S3 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		VarDeclarList V4 = (VarDeclarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MethodDeclList M5 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ClMethod(I1, S2, S3, V4, M5); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT LBRACE StaticVarDeclList StaticInitializerList VarDeclarList RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		StaticVarDeclList S2 = (StaticVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticInitializerList S3 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclarList V4 = (VarDeclarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClVar(I1, S2, S3, V4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ConstName ::= IDENT 
            {
              ConstName RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstName(constName); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*ConstName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= BOOL 
            {
              Constant RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Bool(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR 
            {
              Constant RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		char C1 = (char)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Ch(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= NUMBER 
            {
              Constant RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Num(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstList ::= 
            {
              ConstList RESULT = null;
		 RESULT=new SingleConstDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstList ::= COMMA ConstName EQUAL Constant ConstList 
            {
              ConstList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConstName C1 = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Constant C2 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstList C3 = (ConstList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclList(C1, C2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDecl ::= CONST Type ConstName EQUAL Constant ConstList SEMI 
            {
              ConstDecl RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConstName C1 = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Constant C2 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstList C3 = (ConstList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(constType, C1, C2, C3); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarArray ::= 
            {
              VarArray RESULT = null;
		 RESULT=new NoVariableArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarArray ::= LSQBRACK RSQBRACK 
            {
              VarArray RESULT = null;
		 RESULT=new VariableArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarName ::= IDENT 
            {
              VarName RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarName(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarList ::= error 
            {
              VarList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
			  		parser.report_error("Uspesan oporavak od greske na liniji " + sleft + " pri definisanji globalne promenjive", null); 
		  	   	 RESULT=new VarListDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarList ::= VarName VarArray 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarName V1 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarArray V2 = (VarArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleVarDecl(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarList ::= VarList COMMA VarName VarArray 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarName V2 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarArray V3 = (VarArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclList(V1, V2, V3); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Type VarList SEMI 
            {
              VarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= ClassDecl 
            {
              Decl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclClass(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= VarDecl 
            {
              Decl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclVar(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= ConstDecl 
            {
              Decl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclList ::= 
            {
              DeclList RESULT = null;
		 RESULT=new NoDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= DeclList Decl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Decl D2 = (Decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NamespName ::= IDENT 
            {
              NamespName RESULT = null;
		int nsNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nsNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String nsName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NamespName(nsName); RESULT.setLine(nsNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*NamespName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Namespace ::= NAMESP NamespName LBRACE DeclList LBRACE MethodDeclList RBRACE RBRACE 
            {
              Namespace RESULT = null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		NamespName ns = (NamespName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Namespace(ns, D1, M2); RESULT.setLine(nsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Namespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NamespaceList ::= 
            {
              NamespaceList RESULT = null;
		 RESULT=new NoNameSpace(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*NamespaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NamespaceList ::= NamespaceList Namespace 
            {
              NamespaceList RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		NamespaceList N1 = (NamespaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Namespace N2 = (Namespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NamespaceLists(N1, N2); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*NamespaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName NamespaceList DeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		NamespaceList N1 = (NamespaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclList D2 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M3 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, N1, D2, M3); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

